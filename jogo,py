import networkx as nx
import matplotlib.pyplot as plt
import random
import tkinter as tk
from tkinter import messagebox

class DungeonGame:
    def __init__(self):
        self.graph = nx.Graph()
        self.hero = {"name": "Cappuccino Assassino", "hp": 100, "attack": 20}
        self.monsters = {}
        self.current_room = "Entrada"
        self.create_dungeon()

    def create_dungeon(self):
        """Cria a dungeon como um grafo com monstros."""
        rooms = ["Entrada", "Sala do Brainroot Italiano 1", "Sala do Brainroot Italiano 2", 
                 "Sala do Tung Tung Tung Sahur", "Sala da Ballerina Capuccina", "Tesouro"]
        for room in rooms:
            self.graph.add_node(room)

        # Conecta as salas
        self.graph.add_edges_from([
            ("Entrada", "Sala do Brainroot Italiano 1"),
            ("Entrada", "Sala do Brainroot Italiano 2"),
            ("Sala do Brainroot Italiano 1", "Sala do Tung Tung Tung Sahur"),
            ("Sala do Brainroot Italiano 2", "Sala do Tung Tung Tung Sahur"),
            ("Sala do Tung Tung Tung Sahur", "Sala da Ballerina Capuccina"),
            ("Sala da Ballerina Capuccina", "Tesouro")
        ])

        # Adiciona monstros
        self.monsters = {
            "Sala do Brainroot Italiano 1": {"name": "Brainroot Italiano 1", "hp": 50, "attack": 10},
            "Sala do Brainroot Italiano 2": {"name": "Brainroot Italiano 2", "hp": 50, "attack": 10},
            "Sala do Tung Tung Tung Sahur": {"name": "Tung Tung Tung Sahur", "hp": 100, "attack": 20},
            "Sala da Ballerina Capuccina": {"name": "Ballerina Capuccina", "hp": 80, "attack": 15}
        }

    def roll_d20(self):
        """Rola um dado de 20 lados."""
        return random.randint(1, 20)

    def random_encounter(self):
        """Encontro aleatório com o Saddi."""
        saddi_hp = 30
        saddi_attack = 10
        messagebox.showinfo("Encontro!", "Você encontrou Saddi! Role um d20 para enfrentá-lo.")
        roll = self.roll_d20()
        if roll >= 10:
            messagebox.showinfo("Sucesso!", f"Você rolou {roll} e derrotou Saddi!")
        else:
            damage = random.randint(5, saddi_attack)
            self.hero["hp"] -= damage
            messagebox.showinfo("Fracasso!", f"Você rolou {roll}. Saddi atacou você causando {damage} de dano!")
            if self.hero["hp"] <= 0:
                messagebox.showerror("Derrota", "Você foi derrotado por Saddi! Fim de jogo.")
                exit()

    def battle(self, monster):
        """Interface de batalha entre o herói e um monstro."""
        while self.hero["hp"] > 0 and monster["hp"] > 0:
            action = messagebox.askquestion("Batalha", f"Você encontrou {monster['name']}! Deseja atacar?")
            if action == "yes":
                damage = random.randint(10, self.hero["attack"])
                monster["hp"] -= damage
                if monster["hp"] <= 0:
                    messagebox.showinfo("Vitória!", f"Você derrotou {monster['name']}!")
                    break
                # Monstro ataca
                damage = random.randint(5, monster["attack"])
                self.hero["hp"] -= damage
                if self.hero["hp"] <= 0:
                    messagebox.showerror("Derrota", "Você foi derrotado! Fim de jogo.")
                    exit()
            else:
                messagebox.showinfo("Fuga", "Você fugiu da batalha!")
                return False
        return True

    def move_to_room(self, room):
        """Move o jogador para outra sala."""
        if room in self.graph.neighbors(self.current_room):
            self.current_room = room
            if random.random() < 0.3:  # 30% de chance de encontro aleatório
                self.random_encounter()
            if room in self.monsters:
                self.battle(self.monsters[room])
            if self.hero["hp"] > 0 and room == "Tesouro":
                messagebox.showinfo("Vitória!", "Parabéns! Você encontrou o tesouro e venceu o jogo!")
                exit()
        else:
            messagebox.showwarning("Erro", "Você não pode ir para essa sala!")

    def display_dungeon(self):
        """Exibe o grafo da dungeon."""
        pos = nx.spring_layout(self.graph)
        nx.draw(self.graph, pos, with_labels=True, node_color="lightblue", node_size=3000, font_size=10)
        plt.show()

    def play(self):
        """Inicia o jogo com interface gráfica."""
        root = tk.Tk()
        root.title("Dungeon do Cappuccino Assassino")

        tk.Label(root, text="Bem-vindo à Dungeon do Cappuccino Assassino!", font=("Arial", 14)).pack()

        def update_status():
            status_label.config(text=f"Você está na sala: {self.current_room}\nHP: {self.hero['hp']}")

        status_label = tk.Label(root, text="", font=("Arial", 12))
        status_label.pack()
        update_status()

        for room in self.graph.nodes:
            button = tk.Button(root, text=room, command=lambda r=room: [self.move_to_room(r), update_status()])
            button.pack()

        root.mainloop()


if __name__ == "__main__":
    game = DungeonGame()
    game.display_dungeon()
    game.play()